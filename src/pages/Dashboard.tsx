import { useState, useEffect, useRef } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChatInput } from "@/components/chat-input";
import { PromptPreview } from "@/components/prompt-preview";
import { RenderBar } from "@/components/render-bar";
import { BalanceWidget } from "@/components/balance-widget";
import { useBalance } from "@/hooks/useBalance";
import { useJobRealtime } from "@/hooks/useJobRealtime";
import {
  Video,
  Sparkles,
  Menu,
  Home,
  History,
  CreditCard,
  User,
  Plus,
  MessageSquare,
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { sendPromptToN8N, approvePrompt } from "@/lib/n8n-api";

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockJobs = [
  {
    id: "1",
    dialogue_uuid: "uuid-1",
    quantity: 2,
    status: "done" as const,
    created_at: "2024-01-15T10:30:00Z",
    finished_at: "2024-01-15T10:35:00Z",
    files: [
      {
        id: "f1",
        file_url: "/videos/example1.mp4",
        thumb_url: "https://picsum.photos/400/225?random=1",
        duration: 45,
        size: 15728640,
      },
      {
        id: "f2",
        file_url: "/videos/example2.mp4",
        thumb_url: "https://picsum.photos/400/225?random=2",
        duration: 30,
        size: 12582912,
      },
    ],
  },
  {
    id: "2",
    dialogue_uuid: "uuid-2",
    quantity: 1,
    status: "running" as const,
    created_at: "2024-01-15T11:00:00Z",
  },
  {
    id: "3",
    dialogue_uuid: "uuid-3",
    quantity: 1,
    status: "queued" as const,
    created_at: "2024-01-15T11:05:00Z",
  },
  {
    id: "4",
    dialogue_uuid: "uuid-4",
    quantity: 1,
    status: "error" as const,
    error: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GPU —Ä–µ—Å—É—Ä—Å–æ–≤",
    created_at: "2024-01-15T09:45:00Z",
  },
];

export default function Dashboard() {
  const [currentPrompt, setCurrentPrompt] = useState("");
  const [improvedPrompt, setImprovedPrompt] = useState("");
  const [isImproving, setIsImproving] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showPromptPreview, setShowPromptPreview] = useState(false);
  const [jobs, setJobs] = useState(mockJobs);
  const { balance: userBalance } = useBalance();
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [currentJobId, setCurrentJobId] = useState<string | null>(null);
  const [currentJobStatus, setCurrentJobStatus] = useState<string | null>(null);

  // --- –∞–Ω—Ç–∏-–¥–∞–±–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã + –µ–¥–∏–Ω—ã–π uuid –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ---
  const inFlightRef = useRef(false);
  const dialogueUuidRef = useRef<string | null>(null);

  const navigate = useNavigate();
  const { toast } = useToast();

  // –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      if (!session) navigate("/auth/login");
    });

    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) navigate("/auth/login");
    });

    return () => subscription.unsubscribe();
  }, [navigate]);

  // Realtime subscription for job status updates
  useJobRealtime(currentJobId, (newStatus) => {
    console.log("üì° Job status updated via Realtime:", newStatus);
    setCurrentJobStatus(newStatus);
    
    if (newStatus === "pending_approval") {
      setShowPromptPreview(true);
    } else if (newStatus === "done" || newStatus === "completed") {
      toast({
        title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: "–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!",
      });
    } else if (newStatus === "error") {
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
    }
  });

  // –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ ChatInput
  const handleImprovePrompt = async (text: string) => {
    if (inFlightRef.current) return; // –∞–Ω—Ç–∏-–¥–∞–±–ª
    inFlightRef.current = true;

    setIsImproving(true);
    setCurrentPrompt(text);

    try {
      // –≥–µ–Ω–µ—Ä–∏–º –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω dialogue_uuid –Ω–∞ –¥–∏–∞–ª–æ–≥
      if (!dialogueUuidRef.current) {
        dialogueUuidRef.current = crypto.randomUUID();
      }
      const dialogue_uuid = dialogueUuidRef.current;

      // –æ–¥–∏–Ω –≤—ã–∑–æ–≤ –≤ n8n
      const result = await sendPromptToN8N(text, dialogue_uuid);
      console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç n8n:", result);

      // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º jobId: –±–µ—Ä–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ (job_id | id | dialogue_uuid)
      const jobId: string =
        String(result?.job_id ?? result?.id ?? result?.dialogue_uuid ?? dialogue_uuid);

      setCurrentJobId(jobId);

      // —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é (–±–µ—Ä—ë–º prompt –∏–∑ –æ—Ç–≤–µ—Ç–∞ n8n)
      setImprovedPrompt(result.prompt ?? "");

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–µ–≤—å—é
      setShowPromptPreview(true);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ n8n:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        variant: "destructive",
      });
    } finally {
      setIsImproving(false);
      inFlightRef.current = false;
    }
  };

  const handleEditPrompt = (newPrompt: string) => {
    setImprovedPrompt(newPrompt);
    toast({
      title: "–ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω",
      description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
    });
  };

  const handleGenerate = async (quantity: number) => {
    if (!currentJobId) return;

    if ((userBalance ?? 0) < quantity) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤",
        description: "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    try {
      await approvePrompt(currentJobId, quantity);

      toast({
        title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
        description: `–°–æ–∑–¥–∞—ë–º ${quantity} –≤–∏–¥–µ–æ. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleRefreshJob = (jobId: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤
    console.log(`Refreshing job ${jobId}`);
  };

  const handleDownloadFile = (fileUrl: string, fileName: string) => {
    toast({
      title: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
      description: `–ó–∞–≥—Ä—É–∂–∞–µ–º ${fileName}...`,
    });
  };

  const handlePlayFile = (fileUrl: string) => {
    toast({
      title: "–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ",
      description: "–í–∏–¥–µ–æ–ø–ª–µ–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ",
    });
  };

  const handleTopUp = () => {
    navigate("/app/billing");
  };

  const sidebarItems = [
    { icon: Home, label: "–ì–ª–∞–≤–Ω—ã–π —á–∞—Ç", path: "/app", active: true },
    { icon: Plus, label: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç", path: "/app/new" },
    { icon: History, label: "–ò—Å—Ç–æ—Ä–∏—è", path: "/app/history" },
    { icon: CreditCard, label: "–ë–∏–ª–ª–∏–Ω–≥", path: "/app/billing" },
    { icon: User, label: "–ê–∫–∫–∞—É–Ω—Ç", path: "/app/account" },
  ];

  return (
    <div className="h-screen flex bg-background">
      {/* –°–∞–π–¥–±–∞—Ä */}
      <div
        className={`${
          sidebarOpen ? "w-64" : "w-16"
        } transition-all duration-300 border-r border-border-light bg-card flex flex-col`}
      >
        {/* –õ–æ–≥–æ */}
        <div className="p-4 border-b border-border-light">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 gradient-primary rounded-lg flex items-center justify-center shrink-0">
              <Video className="w-5 h-5 text-white" />
            </div>
            {sidebarOpen && (
              <span className="font-bold text-text-primary">VEO Factory</span>
            )}
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <nav className="flex-1 p-4 space-y-2">
          {sidebarItems.map((item) => (
            <Button
              key={item.path}
              variant={item.active ? "default" : "ghost"}
              className={`w-full justify-start ${!sidebarOpen && "px-3"} ${
                item.active ? "gradient-primary gradient-primary-hover" : ""
              }`}
              onClick={() => navigate(item.path)}
            >
              <item.icon className={`w-4 h-4 ${sidebarOpen ? "mr-3" : ""}`} />
              {sidebarOpen && item.label}
            </Button>
          ))}
        </nav>

        {/* –ë–∞–ª–∞–Ω—Å */}
        {sidebarOpen && (
          <div className="p-4 border-t border-border-light">
            <BalanceWidget balance={userBalance ?? 0} onTopUp={handleTopUp} />
          </div>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="flex-1 flex">
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
        <div className="flex-1 flex flex-col">
          {/* –•–µ–¥–µ—Ä */}
          <header className="h-16 border-b border-border-light bg-white/80 backdrop-blur-sm flex items-center justify-between px-6">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="w-8 h-8 p-0"
            >
              <Menu className="w-4 h-4" />
            </Button>

            {!sidebarOpen && (
              <BalanceWidget
                balance={userBalance ?? 0}
                onTopUp={handleTopUp}
                className="ml-auto"
              />
            )}
          </header>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
          <main className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-4xl mx-auto space-y-8">
              {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
              {!showPromptPreview && (
                <div className="text-center space-y-6 py-12">
                  <div className="space-y-4">
                    <h1 className="text-5xl font-bold text-text-primary">
                      –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º —è –º–æ–≥—É{" "}
                      <span className="text-gradient">–≤–∞–º –ø–æ–º–æ—á—å?</span>
                    </h1>
                    <p className="text-xl text-text-secondary max-w-2xl mx-auto">
                      –û–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å
                      –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    </p>
                  </div>
                </div>
              )}

              {/* –í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ */}
              {!showPromptPreview && (
                <ChatInput
                  onSubmit={handleImprovePrompt}
                  isLoading={isImproving}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å..."
                />
              )}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–ª—É—á—à–µ–Ω–∏—è */}
              {isImproving && (
                <Card className="p-6 text-center">
                  <div className="flex items-center justify-center gap-3 text-primary">
                    <Sparkles className="w-5 h-5 animate-pulse" />
                    <span className="font-medium">–ò–ò —É–ª—É—á—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç...</span>
                  </div>
                </Card>
              )}

              {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–º–ø—Ç–∞ */}
              {showPromptPreview && improvedPrompt && (
                <PromptPreview
                  prompt={improvedPrompt}
                  onEdit={handleEditPrompt}
                  onGenerate={handleGenerate}
                  isGenerating={isGenerating}
                  userBalance={userBalance}
                />
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ */}
              {showPromptPreview && (
                <div className="text-center">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowPromptPreview(false);
                      setCurrentPrompt("");
                      setImprovedPrompt("");
                      setCurrentJobId(null);
                      // –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî –Ω–æ–≤—ã–π uuid
                      dialogueUuidRef.current = null;
                    }}
                    className="gap-2"
                  >
                    <MessageSquare className="w-4 h-4" />
                    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
                  </Button>
                </div>
              )}
            </div>
          </main>
        </div>

        {/* Render Bar */}
        <div className="w-96 border-l border-border-light bg-card p-6 custom-scrollbar">
          <RenderBar
            jobs={jobs}
            onRefreshJob={handleRefreshJob}
            onDownloadFile={handleDownloadFile}
            onPlayFile={handlePlayFile}
          />
        </div>
      </div>
    </div>
  );
}
