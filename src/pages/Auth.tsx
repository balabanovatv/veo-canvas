import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Video, Mail, Lock, User, ArrowLeft, CheckCircle } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";

export default function Auth() {
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("login");
  const navigate = useNavigate();
  const { toast } = useToast();

  const [loginForm, setLoginForm] = useState({
    email: "",
    password: ""
  });

  const [registerForm, setRegisterForm] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: ""
  });

  const [forgotForm, setForgotForm] = useState({
    email: ""
  });

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–∞
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    toast({
      title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
      description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
    });
    
    navigate("/app");
    setIsLoading(false);
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (registerForm.password !== registerForm.confirmPassword) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    toast({
      title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
      description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VEO Factory"
    });
    
    navigate("/app");
    setIsLoading(false);
  };

  const handleForgotPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    toast({
      title: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
    });
    
    setActiveTab("login");
    setIsLoading(false);
  };

  return (
    <div className="min-h-screen bg-background flex">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="hidden lg:flex lg:w-1/2 gradient-primary relative overflow-hidden">
        <div className="relative z-10 flex flex-col justify-center px-12 text-white">
          <div className="space-y-6">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center">
                <Video className="w-6 h-6" />
              </div>
              <span className="text-2xl font-bold">VEO Factory</span>
            </div>
            
            <div className="space-y-4">
              <h1 className="text-4xl font-bold leading-tight">
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ –±—É–¥—É—â–µ–≥–æ —Å –ø–æ–º–æ—â—å—é –ò–ò
              </h1>
              <p className="text-xl opacity-90 leading-relaxed">
                –ü—Ä–µ–≤—Ä–∞—â–∞–π—Ç–µ –∏–¥–µ–∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞ –º–∏–Ω—É—Ç—ã. 
                –ë–µ–∑ –æ–ø—ã—Ç–∞ –≤ –≤–∏–¥–µ–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ.
              </p>
            </div>

            <div className="space-y-4">
              {[
                "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞ 2-5 –º–∏–Ω—É—Ç",
                "üé¨ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "üá∑üá∫ –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
                "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"
              ].map((feature, index) => (
                <div key={index} className="flex items-center gap-3">
                  <CheckCircle className="w-5 h-5 opacity-80" />
                  <span className="opacity-90">{feature}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
        <div className="absolute top-0 right-0 w-64 h-64 bg-white/10 rounded-full -translate-y-32 translate-x-32"></div>
        <div className="absolute bottom-0 left-0 w-48 h-48 bg-white/10 rounded-full translate-y-24 -translate-x-24"></div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="flex-1 flex flex-col justify-center px-8 sm:px-12 lg:px-16">
        <div className="w-full max-w-md mx-auto">
          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
          <div className="mb-8">
            <Link to="/">
              <Button variant="ghost" className="gap-2 p-0 h-auto text-text-secondary hover:text-text-primary">
                <ArrowLeft className="w-4 h-4" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </Link>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */}
            <div className="text-center space-y-2">
              <h2 className="text-3xl font-bold text-text-primary">
                {activeTab === "login" && "–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç"}
                {activeTab === "register" && "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"}
                {activeTab === "forgot" && "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"}
              </h2>
              <p className="text-text-secondary">
                {activeTab === "login" && "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"}
                {activeTab === "register" && "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ VEO Factory"}
                {activeTab === "forgot" && "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É"}
              </p>
            </div>

            {/* –¢–∞–±—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            {activeTab !== "forgot" && (
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="login">–í—Ö–æ–¥</TabsTrigger>
                <TabsTrigger value="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
              </TabsList>
            )}

            {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
            <TabsContent value="login" className="space-y-4">
              <form onSubmit={handleLogin} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="login-email">Email</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="login-email"
                      type="email"
                      placeholder="your@email.com"
                      className="pl-10"
                      value={loginForm.email}
                      onChange={(e) => setLoginForm(prev => ({...prev, email: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="login-password">–ü–∞—Ä–æ–ª—å</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="login-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={loginForm.password}
                      onChange={(e) => setLoginForm(prev => ({...prev, password: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full gradient-primary gradient-primary-hover"
                  disabled={isLoading}
                >
                  {isLoading ? "–í—Ö–æ–¥–∏–º..." : "–í–æ–π—Ç–∏"}
                </Button>

                <div className="text-center">
                  <Button
                    type="button"
                    variant="link"
                    className="text-text-muted hover:text-primary"
                    onClick={() => setActiveTab("forgot")}
                  >
                    –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                  </Button>
                </div>
              </form>
            </TabsContent>

            {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            <TabsContent value="register" className="space-y-4">
              <form onSubmit={handleRegister} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="register-name">–ò–º—è</Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="register-name"
                      type="text"
                      placeholder="–í–∞—à–µ –∏–º—è"
                      className="pl-10"
                      value={registerForm.name}
                      onChange={(e) => setRegisterForm(prev => ({...prev, name: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="register-email">Email</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="register-email"
                      type="email"
                      placeholder="your@email.com"
                      className="pl-10"
                      value={registerForm.email}
                      onChange={(e) => setRegisterForm(prev => ({...prev, email: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="register-password">–ü–∞—Ä–æ–ª—å</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="register-password"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={registerForm.password}
                      onChange={(e) => setRegisterForm(prev => ({...prev, password: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="register-confirm">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="register-confirm"
                      type="password"
                      placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                      className="pl-10"
                      value={registerForm.confirmPassword}
                      onChange={(e) => setRegisterForm(prev => ({...prev, confirmPassword: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full gradient-primary gradient-primary-hover"
                  disabled={isLoading}
                >
                  {isLoading ? "–°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç..." : "–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"}
                </Button>
              </form>
            </TabsContent>

            {/* –§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è */}
            <TabsContent value="forgot" className="space-y-4">
              <form onSubmit={handleForgotPassword} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="forgot-email">Email</Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-muted" />
                    <Input
                      id="forgot-email"
                      type="email"
                      placeholder="your@email.com"
                      className="pl-10"
                      value={forgotForm.email}
                      onChange={(e) => setForgotForm(prev => ({...prev, email: e.target.value}))}
                      required
                    />
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full gradient-primary gradient-primary-hover"
                  disabled={isLoading}
                >
                  {isLoading ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..." : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"}
                </Button>

                <div className="text-center">
                  <Button
                    type="button"
                    variant="link"
                    className="text-text-muted hover:text-primary"
                    onClick={() => setActiveTab("login")}
                  >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
                  </Button>
                </div>
              </form>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}