import { useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send, Sparkles } from "lucide-react";
import { cn } from "@/lib/utils";
import { sendPromptToN8N } from "@/lib/n8n-api";

interface ChatInputProps {
  onSubmit: (text: string) => void;   // —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏ UI/–∏—Å—Ç–æ—Ä–∏—é, –ù–ï –¥–µ—Ä–≥–∞–π —Ç—É—Ç —Å–µ—Ç—å
  isLoading?: boolean;
  placeholder?: string;
  className?: string;
}

export function ChatInput({
  onSubmit,
  isLoading = false,
  placeholder = "–û–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å...",
  className,
}: ChatInputProps) {
  const [text, setText] = useState("");
  const [sending, setSending] = useState(false); // –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ "–∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞"
  const uuidRef = useRef<string | null>(null);   // –æ–¥–∏–Ω uuid –Ω–∞ –æ–¥–Ω—É –æ—Ç–ø—Ä–∞–≤–∫—É
  const maxLength = 3500;

  const actuallySend = async (prompt: string) => {
    // –≥–µ–Ω–µ—Ä–∏–º uuid –û–î–ò–ù —Ä–∞–∑ –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º, –ø–æ–∫–∞ –∑–∞–ø—Ä–æ—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    const uuid = uuidRef.current ?? crypto.randomUUID();
    uuidRef.current = uuid;

    const result = await sendPromptToN8N(prompt, uuid);
    return result;
  };

  const handleSubmit = async (e: React.FormEvent | React.KeyboardEvent) => {
    e.preventDefault();
    if (!text.trim()) return;
    if (isLoading || sending) return;      // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    setSending(true);
    try {
      // 1) –æ–±–Ω–æ–≤–ª—è–µ–º UI (–∏—Å—Ç–æ—Ä–∏—è –∏ —Ç.–ø.) ‚Äî –±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤
      onSubmit(text.trim());

      // 2) —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ n8n —Å –æ–¥–Ω–∏–º uuid
      //    –µ—Å–ª–∏ parent —Å–∞–º –¥–µ—Ä–≥–∞–µ—Ç —Å–µ—Ç—å ‚Äî —É–±–µ—Ä–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ onSubmit()
      console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:", text.trim());
      const res = await actuallySend(text.trim());
      console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç n8n:", res);

      // —É—Å–ø–µ—Ö ‚Äî –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º uuid, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–∏–ª–∞ –Ω–æ–≤—ã–π
      setText("");
      uuidRef.current = null;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ n8n:", err);
      // uuid –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—É –∂–µ –ø–æ–ø—ã—Ç–∫—É –∏–∑ –∫–æ–¥–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å
    } finally {
      setSending(false);
    }
  };

  // Enter –±–µ–∑ Shift ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞. –ú—ã –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–ú –¥–µ—Ñ–æ–ª—Ç, –ø–æ—ç—Ç–æ–º—É form onSubmit –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  const isOverLimit = text.length > maxLength;
  const charactersLeft = maxLength - text.length;

  return (
    <div className={cn("w-full space-y-4", className)}>
      {/* –æ—Å—Ç–∞–≤–ª—è–µ–º onSubmit, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ñ–æ—Ä–º—É —Ä–æ–≤–Ω–æ –û–î–ò–ù —Ä–∞–∑ */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <Textarea
            value={text}
            onChange={(e) => setText(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className={cn(
              "min-h-[120px] resize-none pr-20 border-input-border focus:border-primary/50 focus:ring-primary/20",
              "text-base placeholder:text-text-muted",
              isOverLimit && "border-error focus:border-error focus:ring-error/20"
            )}
            disabled={isLoading || sending}
          />

          <div className="absolute bottom-3 right-3 flex items-center gap-2">
            <span
              className={cn(
                "text-xs font-medium",
                isOverLimit
                  ? "text-error"
                  : charactersLeft < 100
                  ? "text-warning"
                  : "text-text-muted"
              )}
            >
              {charactersLeft < 0
                ? `+${Math.abs(charactersLeft)}`
                : charactersLeft}
            </span>

            <Button
              type="submit"
              size="sm"
              disabled={!text.trim() || isOverLimit || isLoading || sending}
              className="gradient-primary gradient-primary-hover h-8 w-8 p-0 shrink-0"
            >
              {isLoading || sending ? (
                <Sparkles className="w-4 h-4 animate-pulse" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
        </div>
      </form>

      {isOverLimit && (
        <p className="text-sm text-error">
          –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ {Math.abs(charactersLeft)} —Å–∏–º–≤–æ–ª–æ–≤
        </p>
      )}
    </div>
  );
}
